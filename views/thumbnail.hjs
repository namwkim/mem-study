<html>

<head>
    <link rel="stylesheet" href="/stylesheets/modal.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.4/semantic.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css">
    <!--- all style specifications --->
    <style type="text/css">
        div.progress {
            top: 0;
            position: fixed;
            height: 300;
            left: 50%;
            width: 1000px;
            margin-left: -500px;
        }

        div.imagewrapper {
            top: 300;
            position: relative;
            left: 50%;
            width: 1000px;
            margin-left: -500px;
        }

        #imagegrid {
            height: 600px;
            overflow-y: scroll;
        }

    </style>
</head>

<body onload="getUrlObj();">
    <!-- This is the first function that get's executed -->
    <div class="ui container">
        <form id="mturk_form" name="mturk_form" onsubmit="return getChoices()">
            <!-- all elements that are hidden inputs under the form will get submitted during the 'onsubmit' action, but first the onsubmit function will be executed;
               this is a good time to store all the desired values in the input variables -->
            <!-- <input type="hidden" id="assignmentId" name="assignmentId" value=""> -->
            <input type="hidden" id="seqOfImageSelections" name="seqOfImageSelections" value="seqOfImageSelections:">
            <input type="hidden" id="seqOfTimestamps" name="seqOfTimestamps" value="seqOfTimestamps:">
            <input type="hidden" id="imageSelections" name="imageSelections" value="imageSelections:">
            <input type="hidden" id="seqOfAllImages" name="seqOfAllImages" value="seqOfAllImages:">

            <!-------------------------------->

            <!-------------------------------->


            <div class="ui segment">
              <a class="ui red ribbon huge label">Find an image with a given caption.</a>
              <div class="ui stackable three column grid">
                <div class="row">
                    <div class="sixteen wide column">
                      <h3 class="ui red dividing header" style="margin:10px 0px 5px 0px;">Instruction</h3>
                      <div class="ui ordered list" style="margin-top:5px;">
                          <div class="item">Please wait until all images finish loading.</div>
                          <div class="item">Scroll to find the graphic that matches the caption below. The thumbnails summarize each graphic.</div>
                          <div class="item">Click on a thumbnail to see the full graphic.</div>
                          <div class="item">Once you click on the correct graphic you will be able to submit.</div>
                      </div>
                    </div>
                </div>
                <div class="row" >
                    <div class="sixteen wide column">
                        <h3 class="ui red dividing header" style="margin:0px;">Find a graphic image that matches the caption provided.</h3>
                        <button id="submitButton" style="margin-top:5px;" type="submit" class="fluid ui primary button"
                            disabled="true">Submit</button>

                    </div>
                </div>
                <div class="row" style="padding-top:0px;">
                    <div class="sixteen wide column">
                      <div id="loader" class="ui active inverted dimmer">
                        <div class="ui text loader">Loading</div>
                      </div>
                      <div class="ui message" style="margin-top:0px;">
                        <div class="ui small header">
                          Image Caption
                        </div>
                        <p id="captionText">Loading...</p>
                      </div>
                      <div id="imagegrid" class="ui segment">
                        <canvas id="myCanvas" width="600" height="600">
                              Your browser does not support canvas. Sorry, you will not be able to complete this HIT.
                          </canvas>
                      </div>
                    </div>
                </div>
              </div>
            </div>
          </form>
      </div>
    </body>


    <!------------------ MAIN SCRIPT: ------------------>
    <script src="/javascripts/modal.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
    <script src="/javascripts/turkify.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.4/semantic.min.js"></script>
    <script type="text/javascript">

        //https://workersandbox.mturk.com/mturk/externalSubmit
        // https://www.mturk.com/mturk/externalSubmit


        // ----- variables to be outputted -----
        var seqOfImageSelections = new Array();
        var seqOfTimestamps = new Array();
        var imageSelections = new Array();
        var seqOfAllImages = new Array();
        // ---------------------

        var maindir = 'https://people.csail.mit.edu/zoya/VisThumbnails/';
        var fullimpath = maindir + 'fullsize';

        var thumb = 'thumbnails2';
        var fillerdir = maindir + thumb + '/';

        var curCat = 'thumbnail-imagelist';
        var maxSelected = 0;

        var curTarget = '';

        var fillerfilenames = new Array();
        var fillerSubSet = new Array();

        var filenames = new Array();
        var imageSubSet = new Array();

        var whereTarget;
        var fillArr;

        var clickNum = 0;

        var imagesX = 3;
        var imagesY = 20;

        var numImages = imagesX*imagesY;

        var imageArr;
        var selected;
        var nselected;

        var prevSelection = new Array();

        var inputIndex = 0;
        var cellWidth = 290;//150;
        var cellHeight = 290; //200;

        var imageWidth = 270; //140
        var imageHeight = 270; //140

        var borderX = 0; //5;

        var loaded;
        var borderY = 0; //5;

        var preview = false;

        var c = document.getElementById("myCanvas");
        var ctx = c.getContext("2d");


        var offset = 3;

        var chosen = "#CCCCCC";
        var unchosen = 	"#000000"; //""#606060";//white, faded.
        var green = "#00FF00";


        function getUrlObj() {
            var parameters = location.search.substring(1).split("&");
            var obj = {};
            for( var i = 0; i < parameters.length; ++i) {
                var tmp = parameters[i].split("=");
                obj[ tmp[0] ] = unescape( tmp[1] );
            }

            //alert(Object.keys(obj))

            // if (obj['thumb']) {
            //     thumb = obj['thumb'];
            fillerdir = maindir + 'thumbnails' + {{ type }} + '/';
            // }

            if (obj['numims']) {
                imagesY = Math.round(obj['numims']/3.0);
                numImages = imagesX*imagesY;
            }

            getCaption();
        }

        function getCaption() {

            var curfile = '/thumbnail-captions.txt';
            //alert(curfile)
            var txtFile = new XMLHttpRequest();
            txtFile.open("GET",curfile,false);

            txtFile.onreadystatechange = function()
            {

                if (txtFile.readyState === 4) {  // document is ready to parse.

                    if (txtFile.status === 200 || txtFile.status == 0) {  // file is found

                        allText = txtFile.responseText;
                        lines = txtFile.responseText.split("\n");
                        //alert(lines[0])
                        //var ind = 0; // randomize the index

                        var ind = Math.floor(Math.random() * lines.length);

                        var res = (lines[ind]).split(/:(.+)?/);
                        curTarget = res[0];
                        $('#captionText').text(res[1]);

                        loadFillers();
                    }
                }

            }
            txtFile.send(null);


        }


        function loadFillers() {

            //var fillerfile = fillerdir.concat('filelist.txt');
            var fillerfile = '/'+curCat + '.txt';
            var txtFile = new XMLHttpRequest();
            txtFile.open("GET",fillerfile,false);

            txtFile.onreadystatechange = function()
            {
                //alert('inside function')
                if (txtFile.readyState === 4) {  // document is ready to parse.
                    if (txtFile.status === 200 || txtFile.status == 0) {  // file is found
                        allText = txtFile.responseText;
                        lines = txtFile.responseText.split("\n");
                        //alert('lines:'+lines)
                        for (var k=0;k<=lines.length-2;k++){
                            fillerfilenames[k]=fillerdir+lines[k];
                            //alert(filename[k]);
                        }
                        pickFillerImages();
                    }
                }

            }
            txtFile.send(null);
        }

        function pickFillerImages() {
            // Pick a random subset of the images available.
            var imagesSelected = 0;
            var targetpath = fillerdir + curTarget;

            while (imagesSelected < numImages) {
                var pic = fillerfilenames[Math.floor(Math.random() * fillerfilenames.length)];
                if (fillerSubSet.indexOf(pic)>=0) { // already picked this
                    continue;
                }
                if (targetpath===pic) { // don't take target image
                    continue;
                }

                fillerSubSet[imagesSelected]=pic;
                //alert(pic)
                imagesSelected++;
            }
            setupQualificationImages();
        }

        function setupQualificationImages() {
            c.setAttribute("width",imagesX*cellWidth+2*offset);
            c.setAttribute("height", imagesY*cellHeight+2*offset);
            c.addEventListener("click", mouseUp, false); // mouseUp
            //c.addEventListener("click",openModalWindow);
            //c.addEventListener("mousemove", mouseMove, false);

            imageArr = new Array();
            selected = new Array();
            fillArr = new Array();

            loaded=0;
            nselected=0;
            //document.getElementById("progress").value = nselected;

            for (var i = 0; i< imagesX; i++) {
                imageArr[i] = new Array();
                selected[i] = new Array();
                fillArr[i] = new Array();
            }

            for (var i = 0; i<imagesX; i++) {
                for (var j =0; j < imagesY; j++) {
                    fillArr[i][j] = 0;
                }
            }

            // ---------------- place the target image ----------------
            var targetPos = Math.floor(Math.random() * numImages);
            var y = Math.floor(targetPos/imagesX);
            var x = targetPos%imagesX;
            var img = new Image();
            img.onload = function() {incLoad();}
            img.src = fillerdir + curTarget;
            //alert(img.src)
            imageArr[x][y] = img;
            whereTarget = [x,y];
            fillArr[x][y] = 1; // so no other images get put there
            // --------------------------------------------------------


            // load-in filler images
            for (var i = 0; i< numImages; i++) {
                var y = Math.floor(i/imagesX);
                var x = i%imagesX;

                selected[x][y] = 0;

                if (fillArr[x][y]==0) {

                    var img = new Image();
                    img.onload = function() {incLoad();}

                    img.src = fillerSubSet[i];


                    imageArr[x][y] = img;
                    fillArr[x][y]=1;
                }

            }

            //var message = 'Please wait for the images to load before beginning. You will be asked to find the graphic that matches a caption we give you.';
            //alert(message)



        }

        // function readFile(){
        //     var curdir = maindir + curCat + '/';
        //     //var curfile = curdir.concat('filelist.txt');
        //     var curfile = curCat + '.txt';
        //     var txtFile = new XMLHttpRequest();
        //     txtFile.open("GET",curfile,true);
        //
        //     txtFile.onreadystatechange = function()
        //     {
        //         //alert('inside function')
        //         if (txtFile.readyState === 4) {  // document is ready to parse.
        //             if (txtFile.status === 200) {  // file is found
        //                 allText = txtFile.responseText;
        //                 lines = txtFile.responseText.split("\n");
        //                 //alert('lines:'+lines)
        //                 for (var k=0;k<=lines.length-2;k++){
        //                     filenames[k]=curdir+lines[k];
        //                     //alert(filename[k]);
        //                 }
        //                 pickImages();
        //             }
        //         }
        //
        //     }
        //     txtFile.send(null);
        //
        // }

        function pickImages() {
            // Pick a random subset of the images available.
            var imagesSelected = 0;
            while (imagesSelected < numImages) {
                var pic = filenames[Math.floor(Math.random() * filenames.length)];
                if (imageSubSet.indexOf(pic)>=0) {
                    continue;
                }
                imageSubSet[imagesSelected]=pic;
                //alert(pic)
                imagesSelected++;
            }
            document.getElementById('seqOfAllImages').value = 'seqOfAllImages:'+imageSubSet.join();
            onLoad();
        }

        function onLoad(){
            c.setAttribute("width",imagesX*cellWidth+2*offset);
            c.setAttribute("height", imagesY*cellHeight+2*offset);
            c.addEventListener("click", mouseUp, false);
            //c.addEventListener("mousemove", mouseMove, false);

            initImages();
            //drawGrid();

            //drawAll();
        }

        function drawAll() {
            for (var i = 0; i<imagesX; i++) {
                for (var j =0; j < imagesY; j++) {
                    drawImage(i,j, unchosen);
                }
            }
        }

        function initImages() {

            imageArr = new Array();
            selected = new Array();

            loaded=0;
            nselected=0;
            //document.getElementById("progress").value = nselected;

            for (var i = 0; i< imagesX; i++) {
                imageArr[i] = new Array();
                selected[i] = new Array();
            }
            for (var i = 0; i< numImages; i++) {
                var y = Math.floor(i/imagesX);
                var x = i%imagesX;
                var img = new Image();
                img.onload = function() {incLoad();}

                img.src = imageSubSet[i];
                //img.onclick = function() {alert('clicked!');}

                imageArr[x][y] = img;
                selected[x][y] = 0;
            }


        }

        function incLoad() {
            loaded++;
            if (loaded == numImages) {
                //alert(loaded)
                //drawGrid();
                drawAll();
                $('#loader').hide();

            }
        }

        function drawImage(i, j, color) {
            var cx = i*cellWidth; // + offset;
            var cy = j * cellHeight; // + offset;

            var srcWidth = imageArr[i][j].width;
            var srcHeight = imageArr[i][j].height;

            // want to rescale image so that the longest dimension fits inside cell
            var ratio = Math.min(imageWidth / srcWidth, imageHeight / srcHeight);
            var rescWidth = srcWidth*ratio;
            var rescHeight = srcHeight*ratio;

            var shiftX = (cellWidth-rescWidth)/2 - 10;
            var shiftY = (cellHeight-rescHeight)/2 - 10;

            // note: cx+(cellWidth/2) - (imageWidth/2) will shift origin of image (top left corner) to corner of cell


            //ctx.fillStyle = color;
            //ctx.fillRect(cx+1, cy+1, cellWidth-2, cellHeight-2);


            //ctx.drawImage(imageArr[i][j], cx+(cellWidth/2) - (imageWidth/2),
            //cy+(cellHeight/2) - (imageHeight/2), imageWidth, imageHeight);

            //if(color == unseen || color == matched) {
            //	ctx.globalAlpha = 0.8;
            //	ctx.fillRect(cx+1, cy+1, cellWidth-2, cellHeight-2);
            //	ctx.globalAlpha = 1;
            //}
            ctx.shadowBlur=20;
            ctx.shadowColor=color;
            ctx.drawImage(imageArr[i][j], cx+(cellWidth/2) - (imageWidth/2) + shiftX,
                          cy+(cellHeight/2) - (imageHeight/2) + shiftY, rescWidth, rescHeight);
                          //ctx.stroke();

        }

        function drawGrid() {
            for (var i = 0; i<imagesX; i++) {
                for(var j = 0; j < imagesY; j++) {
                    var cx = i * cellWidth ;
                    var cy = j * cellHeight ;
                    ctx.strokeRect(cx, cy, cellWidth, cellHeight);

                    ctx.stroke();
                }
            }
            drawAll();

        }

        function openModalWindow(filename) {
            var child = document.createElement('div');
            child.className = "inside";
            //var text = document.createElement('h1');
            //text.className = "inside-text";
            //text.innerHTML = "Hello Modal";
            var DOM_img = document.createElement('img');
            DOM_img.src = fullimpath + '/' + filename;
            child.appendChild(DOM_img);

            //create modal instance and pass in child elements
            //can be whatever, styled however you want
            var modal = new Modal(child, true);
            modal.show(); //open the modal window
        }

        function openModalSuccessWindow() {
            var child = document.createElement('div');
            child.className = "inside";
            var text = document.createElement('h1');
            text.className = "inside-text";
            text.innerHTML = "You found it! You can now submit this HIT";
            child.appendChild(text);

            //create modal instance and pass in child elements
            //can be whatever, styled however you want
            var modal = new Modal(child, true);
            modal.show(); //open the modal window
        }

        function mouseUp(e) {

            e.preventDefault();
            e.stopPropagation();

            var mx = e.layerX;
            var cx = Math.floor((mx)/cellWidth);
            var my = e.layerY;
            var cy = Math.floor((my - offset)/cellHeight);
            if (!(cx >= 0 && cx <imagesX && cy >=0 && cy<imagesY)) {
                return;
            }

            // show preview image
            var curimage = imageArr[cx][cy].src;
            var filename = curimage.split("/").pop();


            seqOfImageSelections[clickNum] = imageArr[cx][cy].src;
            seqOfTimestamps[clickNum] = +new Date;
            clickNum++;

            //if (nselected < maxSelected) { // haven't run out of number of allowable clicks

            if(prevSelection.length>0){
                //drawImage(prevSelection[0],prevSelection[1],unchosen); // deselect previous selection
            }

            selected[cx][cy] = 1; // select this
            //drawImage(cx,cy, chosen); // mark as selected
            nselected++; // incremement number of images selected
            //document.getElementById("progress").value = nselected;


            prevSelection = [cx,cy]; // put down current selection as previous selection

            //alert('set to 1')
            var foundit = (cx==whereTarget[0]) && (cy==whereTarget[1]);
            if (foundit && !preview) {

                //drawImage(cx,cy, green);

                document.getElementById('submitButton').disabled = false;
                //openModalWindow(filename);

                drawImage(cx,cy, green);
                //setTimeout(function() {
                openModalSuccessWindow();
                //           });


            } else {
                openModalWindow(filename);
            }



        }

        //
        // function gup(name)
        // {
        //     var regexS = "[\\?&]"+name+"=([^&#]*)";
        //     var regex = new RegExp( regexS );
        //     var tmpURL = window.location.href;
        //     var results = regex.exec( tmpURL );
        //     if( results == null )
        //     return "";
        //     else
        //     return results[1];
        // }

        function decode(strToDecode)
        {
            var encoded = strToDecode;
            return unescape(encoded.replace(/\+/g,  " "));
        }

        function getChoices()
        {
            var k = 0;
            for (var i = 0; i<imagesX; i++) {
                for(var j = 0; j < imagesY; j++) {
                    if (selected[i][j] == 1) {
                        imageSelections[k] = imageArr[i][j].src;
                        k++;
                    }
                }
            }
            //alert(imageSelections.join());
            document.getElementById('imageSelections').value = 'imageSelections:'+imageSelections.join();
            document.getElementById('seqOfImageSelections').value = 'seqOfImageSelections:'+seqOfImageSelections.join();
            document.getElementById('seqOfTimestamps').value = 'seqOfTimestamps:'+seqOfTimestamps.join();

            //save data into database too
            var xmlhttp = new XMLHttpRequest(); // new HttpRequest instance
            xmlhttp.open("POST", "/retarget/log");
            xmlhttp.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
            xmlhttp.send(JSON.stringify({
                timestamp: $.now(),
                hitId: gup("hitId"),
                assignmentId: gup("assignmentId"),
                workerId: gup("workerId"),
                action: 'submit',
                data: {
                    study: 'thumbnail',
                    experiment: {{ type }},
                    image_selections: imageSelections,
                    image_selection_sequence: seqOfImageSelections,
                    timestamp_sequence: seqOfTimestamps
                }
            }));
            return true;

        }






        // document.getElementById('assignmentId').value = gup('assignmentId');
        //document.getElementById('catName').value = curCat.toUpperCase();
        //document.getElementById('maxNum').value = maxSelected;
        //
        // Check if the worker is PREVIEWING the HIT or if they've ACCEPTED the HIT
        //

        if (gup('assignmentId') == "ASSIGNMENT_ID_NOT_AVAILABLE")
        {
            // If we're previewing, disable the button and give it a helpful message
            document.getElementById('doneButton').style.visibility = "hidden";
            document.getElementById('submitButton').disabled = true;
            //document.getElementById('submitButton').value = "You must ACCEPT the HIT before you can submit the results.";
            document.getElementById('doneButton').disabled = true;
            //document.getElementById('doneButton').value = "You must ACCEPT the HIT before you can submit the results.";
            preview = true;
        }else{
          var xmlhttp = new XMLHttpRequest(); // new HttpRequest instance
          xmlhttp.open("POST", "/retarget/log");
          xmlhttp.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
          xmlhttp.send(JSON.stringify({
              timestamp: $.now(),
              hitId: gup("hitId"),
              assignmentId: gup("assignmentId"),
              workerId: gup("workerId"),
              action: 'start',
              data:{
                study: 'thumbnail',
                experiment: {{ type }}
              }
          }));
        }
        $(document).ready(function() {
          turkify("#mturk_form");
          console.log("action to : " + $("#mturk_form").attr("action"));
        });
        //else {
        //  var form = document.getElementById('mturk_form');
        //  if (document.referrer && ( document.referrer.indexOf('workersandbox') != -1) ) {
        //      form.action = "https://workersandbox.mturk.com/mturk/externalSubmit";
        //   }
        //}


        </script>


</html>
