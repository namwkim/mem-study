<!DOCTYPE html>
<html>
  	<head>
	    <title>{{ title }}</title>
	    <link rel='stylesheet' href='/bower_components/bootstrap/dist/css/bootstrap.min.css' />
	    <link rel='stylesheet' href='/bower_components/bootstro/bootstro.min.css' />
	    <link rel='stylesheet' href='/bower_components/jquery-ui/themes/smoothness/jquery-ui.min.css' />
	    <link rel='stylesheet' href='/bower_components/seiyria-bootstrap-slider/dist/css/bootstrap-slider.min.css' />
	    <link rel='stylesheet' href='/stylesheets/bubble_admin.css'/>

	    <script src="/bower_components/jquery/dist/jquery.min.js"></script>
	    <script src="/bower_components/jquery-ui/jquery-ui.min.js"></script>
	    <script src="/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
	    <script src="/bower_components/bootstro/bootstro.min.js"></script>
	    <script src="/bower_components/underscore/underscore-min.js"></script>
	    <script src="/bower_components/bootbox/bootbox.js"></script>
	    <script src="/javascripts/heatmap.js-2.0/build/heatmap.js"></script>
	    <script src="/bower_components/angular/angular.min.js"></script>	    
	    <script src="/bower_components/spinjs/spin.js"></script>
	    <script src="/bower_components/seiyria-bootstrap-slider/dist/bootstrap-slider.min.js"></script>
	    <script src="/bower_components/angular-bootstrap-slider/slider.js"></script>
	    
	    
	    <script type="text/javascript">
	    	var PAGE_SIZE 	= 13;
	    	var pageNum 	= 1;
	    	var totalPage 	= -1;
	    	var description = null;
	    	var survey  	= null;	
	    	var images  	= null;
	    	var heatmap 	= null;
	    	var loadComplete = 0;
	    	var progress 	= 0;
	    	var logs = [];
	    	$(document).ready(function(){
	    		Initialize();
			});
	    	/*
			function LoadMore(lastID, callback){
				$.get('/bubble/logs', {pageSize:PAGE_SIZE, lastID: lastID},  function(res){
					console.log(res.logs.length);
					//copy new data (if, exist)
					for (var i in res.logs){
						logs.push(res.logs[i]);
					}
					//check if complete
					if (res.lastID==null){
						loadComplete=1;
						console.log("load complete!");
						callback.call();
						$("#progress-bar").css('width', "100%").attr('aria-valuenow', 100); 
						$("#progress-modal").modal("hide");
						return;
					}
					progress+=15;	
	                $("#progress-bar").css('width', progress+'%').attr('aria-valuenow', progress);
					//try loading more
					console.log('loading additional logs...');
					LoadMore(res.lastID, callback)
				});
			}*/
	    	var app = angular.module('myApp', ['ui.bootstrap-slider'], function($interpolateProvider) {
				$interpolateProvider.startSymbol('<%');
				$interpolateProvider.endSymbol('%>');
			});
	        app.directive("repeatEnd", function($timeout){
	            return {
	                restrict: "A",
	                link: function (scope, element, attrs) {
	                    if (scope.$last) {
	                        $timeout(function(){
	                        	$(element).parent().children()[0].click();
	                        },1)
	                    }
	                }
	            };
	        });
	    	app.controller('imageCtrl', function($scope, $http) {
			    $scope.pages = {};
			    $scope.totalPage = 4;
			    $scope._ = window._;
			    $scope.imageType = "original"
			    $scope.seeBubbles = true
				$scope.formaterFn = function(value) {
					if ($scope.minDate==undefined)
						return value
					
					var date = new Date(parseInt(value));
					var diff = new Date(date.getTime() - $scope.minDate.getTime())
					return  diff.getMinutes() + ":" + diff.getSeconds();
				};
				$scope.onSlide = function(e, value){
					if (loadComplete==0)
						return;
					$scope.updateCanvas();
				};
				$scope.updateCanvas = function(){					
					var imagePath = $scope.imagePath
					if ($scope.imageType=="blurred")
						imagePath = $scope.blurredImage
					var max = new Date(parseInt($scope.slider.value));
					var diff = new Date(max.getTime() - $scope.minDate.getTime())
					console.log(diff)
					drawImage(imagePath, function(){
						if ($scope.seeBubbles)
				    		drawBubbles($scope.clickData, diff);
			    	});	

			    	//update description
			    	var diffDesc = null;
			    	for (var i in $scope.diffs){
			    		var d = new Date(parseInt($scope.diffs[i].timestamp));
			    		if (d.getTime()<=max.getTime())
			    			diffDesc = $scope.diffs[i]
			    	}
			    	if (diffDesc!=null){
				    	$('#bubble-desc').empty();
						diffDesc['data']['desc_log'].forEach(function(part){
				            // green for additions, red for deletions
				            // grey for common parts
				            var color = part.added ? 'green' :
				              part.removed ? 'red' : 'grey';

				            var span = $("<span>" + part.value + "</span>");
				            span.css("color", color);
				            span.appendTo("#bubble-desc");

			          	});			    		
			    	}
				}
				$scope.onImageTypeChange = function(){
					if (loadComplete==0)
						return;
					$scope.updateCanvas();
				}
				$scope.onSeeBubblesCheck = function(){
					if (loadComplete==0)
						return;
					$scope.updateCanvas();	
					//$("#bSlider").attr("enabled", $scope.seeBubbles);
					console.log($("#bSlider").attr("enabled"));
				}
			    $scope.onClickAssmt = function(e, x){
			    	if (e!=null){
						$("#assignment-list a.active").removeClass("active");
						$(e.currentTarget).addClass("active");			    		
			    	}	
			    	
			    	$scope.desc = x.desc.data.desc;
			    	$scope.diffs = x.diffs;
			    	$scope.survey = x.survey;

			    	$scope.clickData = x.clicks;
			    	$scope.imagePath = x.clicks[0].data.image;
			    	$scope.blurredImage = $scope.imagePath.replace("targets", "targets_blurred");
			    	   	
			    	//set a time slider
			    	$scope.minDate = new Date(parseInt($scope.clickData[0].timestamp));
			    	clickMin = parseInt($scope.clickData[0].timestamp);
			    	diffMin  = parseInt($scope.diffs[0].timestamp);
			    	clickMax = parseInt($scope.clickData[$scope.clickData.length-1].timestamp)
			    	diffMax = parseInt($scope.diffs[$scope.diffs.length-1].timestamp)
			    	$scope.slider = {
			    		min : Math.min(clickMin, diffMin),
			    		max : Math.max(clickMax, diffMax),
			    		value: Math.max(clickMax, diffMax)
			    		
			    	}
			    	console.log($scope.slider);
			    	$scope.updateCanvas();	

			    }

			    $scope.onClickImage = function(e){
			    	if (e!=null){
						$("#image-list a.active").removeClass("active");
						$(e.currentTarget).addClass("active");			    		
			    	}
			    	var imgName = $(e.target).text();
			    	for (var i in $scope.images){
			    		var image = $scope.images[i]
			    		if (image.image==imgName){
			    			//update assignments
			    			$scope.assignments = image.logs;	
			    			console.log('assignments:')
			    			console.log($scope.assignments)
			    			break;
			    		}
			    	}

			    }
			    $scope.onClickPage = function(e, pnum) {
			    	console.log(e.target)
			    	pageNum = pnum;		
			    	if ($('#image-list').html()=="" && loadComplete==0){
			    		$("#load-alert").show().effect( "shake" ).delay(1000).toggle( "fade" );
			    	}
			    	if (e!=null){
						$("ul.pagination li.active").removeClass("active");
						$(e.currentTarget).addClass("active");			    		
			    	}	    	
			    	if ($scope.pages[pageNum]==null){// if not loaded
			    		
			    		var query = {pageSize:PAGE_SIZE, pageNum: pageNum};
			    		console.log(query);
			    		var spinner = new Spinner().spin();
						$("#image-panel").prepend(spinner.el);	
						$('#image-list').fadeTo("fast", 0.3);
						loadComplete = 0;
			    		$http.get('/bubble/pagelogs', {params: query})
			    			.success(function(res){
			    				//remove spinner		
								//update image list
								$("#image-panel").find('.spinner').remove();
								

								$scope.totalPage = res.totalPage;
								
								$scope.images = $scope.pages[pageNum] = res.logs;		

								$('#image-list').fadeTo("fast", 1.0);						
								loadComplete = 1;
			    			})

			    	}else{
			    		$scope.images = $scope.pages[pageNum];	
			    	}
					
			    }		
			
			    //$scope.onClickPage(null, 0);	    
			});
			function Initialize(){
				$("#progress-modal").modal({
	                keyboard: false,
	                backdrop: "static"
	            });
	            // progressbar
	            var timer;
	            timer = setInterval(function(){
					//check if complete
					if (loadComplete==1){
						console.log("load complete!");
						$("#progress-bar").css('width', "100%").attr('aria-valuenow', 100); 
						$("#progress-modal").modal("hide");
						clearInterval(timer);
						return;
					}
					progress+=15;	
	                $("#progress-bar").css('width', progress+'%').attr('aria-valuenow', progress);
					
	            }, 500);
			    	$('#ex1').slider({
						formatter: function(value) {
							return 'Current value: ' + value;
						}
					});

			}

			function drawImage(imagePath, callback){
				//draw image
				var img = new Image();
				img.onload = function(){
					var canvas = $("#bubble-canvas");
					console.log(this.naturalWidth);
					var ctx = canvas[0].getContext('2d');
					ctx.clearRect(0, 0, canvas[0].width, canvas[0].height);

					var newSize = CalcNewImageSize(this.naturalWidth, this.naturalHeight, canvas[0].width, canvas[0].height);
					ctx.drawImage(img,0,0, newSize.width, newSize.height);

					if (callback) callback.call();

				}
				img.src = imagePath;	
			}

			function drawBubbles(clickData, maxDate){
				var canvas = $("#bubble-canvas");
				console.log(canvas)
				var ctx = canvas[0].getContext('2d');
				

				
				//draw circles
				ctx.save();
				ctx.globalAlpha = 0.2;
				
				prev_x = null, prev_y=null

				//heatmapData = [];
				for (var i in clickData){
					
					var click = clickData[i].data;
					//console.log(click);
					/*heatmap.addData({
				    	x: click.center_x,
					    y: click.center_y,
					    value: 100
					 });
					*/
					var date = new Date(parseInt(clickData[i].timestamp));
					var minDate = new Date(parseInt(clickData[0].timestamp));
					var diff = new Date(date.getTime() - minDate.getTime())

					if (maxDate && maxDate.getTime()<diff.getTime())
						break;

					ctx.beginPath();
					ctx.arc(click.center_x, click.center_y, click.radius, 0, 6.28, false); 
					ctx.fillStyle="red";
					ctx.fill();

					if (prev_x && prev_y){
						ctx.save();
						ctx.globalAlpha = 0.5;
						ctx.beginPath();
						ctx.moveTo(prev_x, prev_y);
						ctx.lineTo(click.center_x, click.center_y);
						ctx.strokeStyle="green";
						ctx.stroke();
						ctx.restore();
					}
					ctx.save();
					ctx.globalAlpha = 0.8;	
					ctx.fillStyle="green"
					roundRect(ctx, parseFloat(click.center_x), parseFloat(click.center_y), 25, 12, 5, true, false);
					ctx.restore();

					ctx.save();
					ctx.beginPath();
					ctx.font="10px Georgia";		
					ctx.globalAlpha = 0.5;	
					ctx.fillStyle="white";
					
					ctx.fillText(diff.getMinutes()+":"+diff.getSeconds(), click.center_x, parseFloat(click.center_y)+8);
					ctx.restore();

					prev_x=click.center_x;	prev_y = click.center_y;

					//heatmapData.push({x:click.center_x, y:click.center_y, value:1})
				}
				ctx.restore();
			}

			function CalcNewImageSize(imgWidth, imgHeight, canvasWidth, canvasHeight) {		
				console.log("(canvasWidth, canvasHeight) = " + canvasWidth + ", " + canvasHeight);
				//console.log("(oldWidth, oldHeight) = " + imgWidth + ", " + imgHeight);						
				var newWidth 	= imgWidth;	
				var newHeight	= imgHeight;		
				if (newWidth>canvasWidth){
					newWidth 	= canvasWidth;
					var wratio 	= canvasWidth/imgWidth;
					newHeight 	= wratio*newHeight;
				}
				if (newHeight>canvasHeight){
					newHeight 	= canvasHeight;
					var hratio 	= canvasHeight/imgHeight;
					newWidth 	= hratio*newWidth;
				}
				//console.log("(newWidth, newHeight) = " + newWidth + ", " + newHeight);
				return {width: newWidth, height: newHeight};
			}
			function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
				if (typeof stroke == "undefined" ) {
					stroke = true;
				}
				if (typeof radius === "undefined") {
					radius = 5;
				}
				ctx.beginPath();
				ctx.moveTo(x + radius, y);
				ctx.lineTo(x + width - radius, y);
				ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
				ctx.lineTo(x + width, y + height - radius);
				ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
				ctx.lineTo(x + radius, y + height);
				ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
				ctx.lineTo(x, y + radius);
				ctx.quadraticCurveTo(x, y, x + radius, y);
				ctx.closePath();
				if (stroke) {
					ctx.stroke();
				}
				if (fill) {
					ctx.fill();
				}        
			}


	    </script>
  	</head>
  	<body ng-app="myApp" ng-controller="imageCtrl">
		<!-- Progress Modal -->
		<div class="modal fade" id="progress-modal" tabindex="-1" role="dialog" aria-labelledby="progress-modal-label" aria-hidden="true">
		    <div class="modal-dialog">
		        <div class="modal-content">
		            <div class="modal-header">
		                <h4 class="modal-title" id="progress-modal-label">Loading Bubbles...</h4>
		            </div>
		            <div class="modal-body">
		                <div class="progress">
		                    <div id="progress-bar" class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;">
		                    </div>
		                </div>  
		            </div>
		        </div>
		    </div>
		</div>
	  	<div class="container">
	  		<h3><span class="glyphicon glyphicon-search" aria-hidden="true"></span> Bubble Monitoring Interface</h3>
	  		<div class="row">
	  			<div class="col-md-2">
	  				<div  id="image-panel" class="panel panel-default">
	  					<div id="load-alert" class="alert alert-danger" role="alert" style="display:none">Be Patient!</div>
						<!-- Default panel contents -->
						<div class="panel-heading">Images</div>
						<!-- Pagination -->
						<nav class="text-center">
						  <ul class="pagination pagination-sm">						    
						    <li class="animate-repeat" ng-repeat="x in _.range(1,totalPage+1)" ng-class="{active: $first}" ng-click="onClickPage($event, x)" repeat-end>
						    	<a href="#"><% x %></a>
						    </li>					    
						  </ul>
						</nav>

						<!-- List group -->
						<div id="image-list" class="list-group" style="max-height:600px;overflow-y:scroll;">
							<a href="#" class='list-group-item' ng-repeat="x in images" ng-class="{active: $first}" ng-click="onClickImage($event)" repeat-end><% x.image %></a>
						</div>
					</div>
	  			</div>
	  			<div class="col-md-2">
	  				<div class="panel panel-default">
						<!-- Default panel contents -->
						<div class="panel-heading">AssignmentID</div>
						<!-- List group -->
						<div id="assignment-list" class="list-group" style="max-height:600px;overflow-y:scroll;">
							<a href="#" class='list-group-item' ng-repeat="x in assignments" ng-class="{active: $first}" ng-click="onClickAssmt($event, x)" repeat-end><% x.survey.assignment_id %></a>
						</div>
					</div>
	  			</div>
	  			<div class="col-md-8">
	  				<div class="panel panel-default" role="tabpanel">
	  					<div class="panel-heading">
					  		<!-- Nav tabs -->
					  		<ul class="nav nav-pills" role="tablist">
							    <li role="presentation" class="active"><a href="#bubble" aria-controls="bubble" role="tab" data-toggle="tab">Bubble</a></li>
							    <li role="presentation"><a href="#survey" aria-controls="survey" role="tab" data-toggle="tab">Survey</a></li>
						  	</ul>
					  	</div>

					  	<!-- Tab panes -->
					  	<div class="panel-body">
						  	<div class="tab-content">
						    	<div role="tabpanel" class="tab-pane fade in active" id="bubble">
						    		<div class="well">
						    			<p id="bubble-desc" ><% desc %></p>
						    		</div>
						    		<div class="panel panel-default">
										<div class="panel-body">
								    		<div class="row">
								    			<div class="col-md-4">
									    			<label class="radio-inline"><input type="radio" name="imageType" ng-model="imageType" value="original" ng-change="onImageTypeChange()">Original</label>
													<label class="radio-inline"><input type="radio" name="imageType" ng-model="imageType" value="blurred" ng-change="onImageTypeChange()">Blurred</label>													
												</div>
												<div class="col-md-8">
													<label class="checkbox-inline"><input type="checkbox" ng-model="seeBubbles" ng-change="onSeeBubblesCheck()">See Bubbles</label>
													<slider id="bSlider" ng-model="slider.value" min="slider.min" step="slider.step" max="slider.max" value="slider.value" formater="formaterFn" on-slide="onSlide($event, value)" ></slider>
												</div>
								    		</div>
								    		<br>
								    		<canvas id="bubble-canvas" width="600" height="600"></canvas>
										</div>
									</div>

						    	</div>
						    	<div role="tabpanel" class="tab-pane fade" id="survey">
						    		<strong>HIT ID: </strong><% survey.hit_id %></span>
						    		<br><br>
						    		<strong>Assignment ID: </strong><% survey.assignment_id%></span>
						    		<br><br>
						    		<!--<strong>Worker ID: </strong><span id="survey-worker"></span>
						    		<br><br>
						    		<strong>Image File: </strong><span id="survey-image"></span>
						    		<br><br>-->
						    		<strong>Gender: </strong><% survey.data.gender %></span>
						    		<br><br>
						    		<strong>Age: </strong><% survey.data.age %></span>
						    		<br><br>
						    		<strong>Ethnicity: </strong><% survey.data.ethnic %></span>
						    		<br><br>
						    		<strong>Feedback: </strong><% survey.data.feedback%></span>
						    		<br><br>


						    	</div>
						  	</div>
					  	</div>
					</div>
	  				
	  			</div>

    		</div>
		<div>
  	</body>
</html>