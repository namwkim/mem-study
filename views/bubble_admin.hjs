<!DOCTYPE html>
<html>
  	<head>
	    <title>{{ title }}</title>
	    <link rel='stylesheet' href='/bower_components/bootstrap/dist/css/bootstrap.min.css' />
	    <link rel='stylesheet' href='/bower_components/bootstro/bootstro.min.css' />
	    <link rel='stylesheet' href='/stylesheets/bubble_admin.css'/>

	    <script src="/bower_components/jquery/dist/jquery.min.js"></script>
	    <script src="/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
	    <script src="/bower_components/bootstro/bootstro.min.js"></script>
	    <script src="/bower_components/underscore/underscore-min.js"></script>
	    <script src="/bower_components/bootbox/bootbox.js"></script>
	    <script src="/javascripts/heatmap.js-2.0/build/heatmap.js"></script>
	    <script type="text/javascript">
	    	var curImage 	= null, curAssignment = null;
	    	var assignments = {};
	    	var description = null;
	    	var survey  	= null;	
	    	var images  	= null;
	    	var heatmap 	= null
	    	$(document).ready(function(){
	    		Initialize();
			});
			function Initialize(){

				//set bubble image
				
				heatmap = h337.create({
  					container: document.getElementById('bubble-canvas'),
  					radius: 16
				});

				//load logs								
	    		$.get('/bubble/logs', function(res){
	    			var logs = res;
	    			console.log(logs);
	    			//get survey
	    			survey = _.chain(logs)
	    				.filter(function(log){ return log.action=="survey";})
	    				.reduce(function(map, log){
	    					var key = log.hit_id + "/" + log.assignment_id;
	    					map[key] = log;
	    					//console.log(map);
	    					return map;
	    				}, {})
	    				.value();


	    			//get text-description
	    			description = _.chain(logs)
	    				.filter(function(log){ return log.action=="explain" && log.data.is_practice=="false";})
	    				.reduce(function(map, log){
	    					if (_.has(survey,log.hit_id + "/" + log.assignment_id)==false)//filter invalid assignments
	    						return map;
	    					var key = log.data.image + "/" + log.hit_id + "/" + log.assignment_id;
	    					map[key] = log;
	    					//console.log(map);
	    					return map;
	    				}, {})
	    				.value();
	    			console.log(description);

	    			
    				console.log(survey);

	    			//get click data
	    			clicks = _.filter(logs, function(log){ 
	    				return log.action=="click" && log.data.is_practice=="false" &&
	    					_.has(description, log.data.image + "/" + log.hit_id + "/" + log.assignment_id)==true&&
	    					_.has(survey,log.hit_id + "/" + log.assignment_id)==true; 
	    			});

	    			// group by images
	    			images = _.groupBy(clicks, function(click){ return click.data.image.replace(/^.*[\\\/]/, ''); });

	    			// for each image, group by assignments
	    			for (var image_name in images){
	    				assignments[image_name] = _.groupBy(images[image_name], function(click){ return click.hit_id +"/"+click.assignment_id; });
	    			}
	    			UpdateImageList(images);
				});
			}
			function UpdateImageList(){
				for (var image_name in images){					
					//create new elem
					var newElem = $("<a class='list-group-item' >" + image_name + "</a>");

					//append to list
					newElem.appendTo("#image-list");					

					//click callback
					newElem.click(assignments[image_name], function(e){
						$("#image-list a.active").removeClass("active");
						$(this).addClass("active");

						$("#assignment-list").empty();
						UpdateAssignmentList(e.data);

						//$(this).addClass("active");
					})
				}
				//select first
				$("#image-list a").first().click();
			}
			function UpdateAssignmentList(as_list){
				console.log(as_list);
				for (var key in as_list){
					
					//create new elem
					var newElem = $("<a class='list-group-item' >" + key + "</a>");

					//append to list
					newElem.appendTo("#assignment-list");	

					//click callback
					newElem.click(as_list[key], function(e){
						$("#assignment-list a.active").removeClass("active");
						$(this).addClass("active");

						var clickData = e.data;
						var image_path = clickData[0].data.image;
						
						
						//draw image
						var img = new Image();
						img.onload = function(){
							var canvas = $("#bubble-canvas");
							console.log(this.naturalWidth);
							var ctx = canvas[0].getContext('2d');
							ctx.clearRect(0, 0, canvas[0].width, canvas[0].height);

							var newSize = CalcNewImageSize(this.naturalWidth, this.naturalHeight, canvas[0].width, canvas[0].height);
							ctx.drawImage(img,0,0, newSize.width, newSize.height);

							//draw circles
							ctx.save();
							ctx.globalAlpha = 0.2;
							
							prev_x = null, prev_y=null

							heatmapData = [];
							for (var i in clickData){
								var click = clickData[i].data;
								//console.log(click);
								/*heatmap.addData({
							    	x: click.center_x,
								    y: click.center_y,
								    value: 100
								 });
								*/
								
								ctx.beginPath();
								ctx.arc(click.center_x, click.center_y, click.radius, 0, 6.28, false); 
								ctx.fillStyle="red";
								ctx.fill();

								if (prev_x && prev_y){
									ctx.save();
									ctx.globalAlpha = 0.5;
									ctx.beginPath();
									ctx.moveTo(prev_x, prev_y);
									ctx.lineTo(click.center_x, click.center_y);
									ctx.strokeStyle="green";
									ctx.stroke();
									ctx.restore();
								}
								ctx.save();
								ctx.globalAlpha = 0.8;	
								ctx.fillStyle="green"
								roundRect(ctx, parseFloat(click.center_x), parseFloat(click.center_y), 25, 12, 5, true, false);
								ctx.restore();

								ctx.save();
								ctx.beginPath();
								ctx.font="10px Georgia";		
								ctx.globalAlpha = 0.5;	
								ctx.fillStyle="white";
								var date = new Date(parseInt(clickData[i].timestamp));
								ctx.fillText(date.getMinutes()+":"+date.getSeconds(), click.center_x, parseFloat(click.center_y)+8);
								ctx.restore();

								prev_x=click.center_x;	prev_y = click.center_y;

								heatmapData.push({x:click.center_x, y:click.center_y, value:1})
							}
							ctx.restore();
							
							heatmap.setData({data:heatmapData});
							console.log()
						}
						img.src = image_path;	
						
						//set text description
						var explain = description[clickData[0].data.image + "/" + clickData[0].hit_id + "/" + clickData[0].assignment_id];
						$("#bubble-desc").text(explain.data.desc);

						//set survey data
						var s = survey[clickData[0].hit_id + "/" + clickData[0].assignment_id];
						$("#survey-hit").text(s.hit_id);
						$("#survey-assignment").text(s.assignment_id);
						$("#survey-worker").text(s.worker_id);
						$("#survey-image").text(image_path);
						$("#survey-gender").text(s.data.gender);
						$("#survey-age").text(s.data.age);
						$("#survey-ethnicity").text(s.data.ethnic);
						$("#survey-feedback").text(s.data.feedback);
					})

				}
				$("#assignment-list a").first().click();

			}
			function CalcNewImageSize(imgWidth, imgHeight, canvasWidth, canvasHeight) {		
				console.log("(canvasWidth, canvasHeight) = " + canvasWidth + ", " + canvasHeight);
				//console.log("(oldWidth, oldHeight) = " + imgWidth + ", " + imgHeight);						
				var newWidth 	= imgWidth;	
				var newHeight	= imgHeight;		
				if (newWidth>canvasWidth){
					newWidth 	= canvasWidth;
					var wratio 	= canvasWidth/imgWidth;
					newHeight 	= wratio*newHeight;
				}
				if (newHeight>canvasHeight){
					newHeight 	= canvasHeight;
					var hratio 	= canvasHeight/imgHeight;
					newWidth 	= hratio*newWidth;
				}
				//console.log("(newWidth, newHeight) = " + newWidth + ", " + newHeight);
				return {width: newWidth, height: newHeight};
			}
			function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
				if (typeof stroke == "undefined" ) {
					stroke = true;
				}
				if (typeof radius === "undefined") {
					radius = 5;
				}
				ctx.beginPath();
				ctx.moveTo(x + radius, y);
				ctx.lineTo(x + width - radius, y);
				ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
				ctx.lineTo(x + width, y + height - radius);
				ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
				ctx.lineTo(x + radius, y + height);
				ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
				ctx.lineTo(x, y + radius);
				ctx.quadraticCurveTo(x, y, x + radius, y);
				ctx.closePath();
				if (stroke) {
					ctx.stroke();
				}
				if (fill) {
					ctx.fill();
				}        
}


	    </script>
  	</head>
  	<body>
	  	<div class="container">
	  		<h3><span class="glyphicon glyphicon-search" aria-hidden="true"></span> Bubble Monitoring Interface</h3>
	  		<div class="row">
	  			<div class="col-md-2">
	  				<div class="panel panel-default">
						<!-- Default panel contents -->
						<div class="panel-heading">Images</div>
						<!-- List group -->
						<div id="image-list" class="list-group">
					
						</div>
					</div>
	  			</div>
	  			<div class="col-md-2">
	  				<div class="panel panel-default">
						<!-- Default panel contents -->
						<div class="panel-heading">HIT/Assignments</div>
						<!-- List group -->
						<div id="assignment-list" class="list-group">
					
						</div>
					</div>
	  			</div>
	  			<div class="col-md-8">
	  				<div class="panel panel-default" role="tabpanel">
	  					<div class="panel-heading">
					  		<!-- Nav tabs -->
					  		<ul class="nav nav-pills" role="tablist">
							    <li role="presentation" class="active"><a href="#bubble" aria-controls="bubble" role="tab" data-toggle="tab">Bubble</a></li>
							    <li role="presentation"><a href="#desc" aria-controls="desc" role="tab" data-toggle="tab">Description</a></li>
							    <li role="presentation"><a href="#survey" aria-controls="survey" role="tab" data-toggle="tab">Survey</a></li>
						  	</ul>
					  	</div>

					  	<!-- Tab panes -->
					  	<div class="panel-body">
						  	<div class="tab-content">
						    	<div role="tabpanel" class="tab-pane fade in active" id="bubble">
						    		<canvas id="bubble-canvas" width="600" height="600"></canvas>
						    	</div>
						    	<div role="tabpanel" class="tab-pane fade" id="desc">
						    		<p id="bubble-desc"></p>
						    	
						    	</div>
						    	<div role="tabpanel" class="tab-pane fade" id="survey">
						    		<strong>HIT ID: </strong><span id="survey-hit"></span>
						    		<br><br>
						    		<strong>Assignment ID: </strong><span id="survey-assignment"></span>
						    		<br><br>
						    		<strong>Worker ID: </strong><span id="survey-worker"></span>
						    		<br><br>
						    		<strong>Image File: </strong><span id="survey-image"></span>
						    		<br><br>
						    		<strong>Gender: </strong><span id="survey-gender"></span>
						    		<br><br>
						    		<strong>Age: </strong><span id="survey-age"></span>
						    		<br><br>
						    		<strong>Ethnicity: </strong><span id="survey-ethnicity"></span>
						    		<br><br>
						    		<strong>Feedback: </strong><span id="survey-feedback"></span>
						    		<br><br>


						    	</div>
						  	</div>
					  	</div>
					</div>
	  				
	  			</div>

    		</div>
		<div>
  	</body>
</html>